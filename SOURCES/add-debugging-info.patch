Add extra debug statements

These statements are logged at ERROR level so they are present even in
"release" builds. They make it easier to determine where the VM is in the
bootup process.

The key points of interest are:

* PV block device connected
* Bootloader started (StartImage) and any error returned
* ExitBootServices() called
* SetVirtualAddressMap() called

diff --git a/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c b/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
index 5733f0c8ec84..9b5c8b74149a 100644
--- a/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
+++ b/MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
@@ -763,6 +763,8 @@ CoreExitBootServices (
 {
   EFI_STATUS  Status;
 
+  DEBUG ((DEBUG_ERROR, "ExitBootServices -> (0x%p, 0x%lx)\n", ImageHandle, MapKey));
+
   //
   // Disable Timer
   //
@@ -777,6 +779,7 @@ CoreExitBootServices (
     // Notify other drivers that ExitBootServices fail
     //
     CoreNotifySignalList (&gEventExitBootServicesFailedGuid);
+    DEBUG ((DEBUG_ERROR, "ExitBootServices <- (%r)\n", Status));
     return Status;
   }
 
@@ -834,6 +837,8 @@ CoreExitBootServices (
   //
   gRuntime->AtRuntime = TRUE;
 
+  DEBUG ((DEBUG_ERROR, "ExitBootServices <- (%r)\n", Status));
+
   return Status;
 }
 
diff --git a/MdeModulePkg/Core/Dxe/Image/Image.c b/MdeModulePkg/Core/Dxe/Image/Image.c
index b28f01289281..a69c750bde50 100644
--- a/MdeModulePkg/Core/Dxe/Image/Image.c
+++ b/MdeModulePkg/Core/Dxe/Image/Image.c
@@ -1734,7 +1734,11 @@ CoreStartImage (
     //
     DEBUG_CODE_BEGIN ();
     if (EFI_ERROR (Image->Status)) {
-      DEBUG ((DEBUG_ERROR, "Error: Image at %11p start failed: %r\n", Image->Info.ImageBase, Image->Status));
+      if (Image->Status == EFI_UNSUPPORTED) {
+        DEBUG ((DEBUG_WARN, "Error: Image at %11p start failed: %r\n", Image->Info.ImageBase, Image->Status));
+      } else {
+        DEBUG ((DEBUG_ERROR, "Error: Image at %11p start failed: %r\n", Image->Info.ImageBase, Image->Status));
+      }
     }
 
     DEBUG_CODE_END ();
diff --git a/MdeModulePkg/Core/Dxe/Mem/Page.c b/MdeModulePkg/Core/Dxe/Mem/Page.c
index cc0b90ac0df5..e9e1e70adecf 100644
--- a/MdeModulePkg/Core/Dxe/Mem/Page.c
+++ b/MdeModulePkg/Core/Dxe/Mem/Page.c
@@ -771,7 +771,7 @@ CoreConvertPagesEx (
     }
 
     if (Link == &gMemoryMap) {
-      DEBUG ((DEBUG_ERROR | DEBUG_PAGE, "ConvertPages: failed to find range %lx - %lx\n", Start, End));
+      DEBUG ((DEBUG_WARN | DEBUG_PAGE, "ConvertPages: failed to find range %lx - %lx\n", Start, End));
       return EFI_NOT_FOUND;
     }
 
@@ -782,7 +782,7 @@ CoreConvertPagesEx (
     //
     if (ChangingType && (NewType != EfiConventionalMemory)) {
       if (Entry->End < End) {
-        DEBUG ((DEBUG_ERROR | DEBUG_PAGE, "ConvertPages: range %lx - %lx covers multiple entries\n", Start, End));
+        DEBUG ((DEBUG_WARN | DEBUG_PAGE, "ConvertPages: range %lx - %lx covers multiple entries\n", Start, End));
         return EFI_NOT_FOUND;
       }
     }
diff --git a/MdeModulePkg/Core/RuntimeDxe/Runtime.c b/MdeModulePkg/Core/RuntimeDxe/Runtime.c
index de8f2bfce0f8..9249768ac672 100644
--- a/MdeModulePkg/Core/RuntimeDxe/Runtime.c
+++ b/MdeModulePkg/Core/RuntimeDxe/Runtime.c
@@ -244,11 +244,14 @@ RuntimeDriverSetVirtualAddressMap (
   LIST_ENTRY               *Link;
   EFI_PHYSICAL_ADDRESS     VirtImageBase;
 
+  DEBUG ((DEBUG_ERROR, "SetVirtualAddressMap -> (0x%lx, 0x%lx, 0x%x)\n", MemoryMapSize, DescriptorSize, DescriptorVersion));
+
   //
   // Can only switch to virtual addresses once the memory map is locked down,
   // and can only set it once
   //
   if (!mRuntime.AtRuntime || mRuntime.VirtualMode) {
+    DEBUG ((DEBUG_ERROR, "SetVirtualAddressMap <- (%r)\n", EFI_UNSUPPORTED));
     return EFI_UNSUPPORTED;
   }
 
@@ -256,6 +259,7 @@ RuntimeDriverSetVirtualAddressMap (
   // Only understand the original descriptor format
   //
   if ((DescriptorVersion != EFI_MEMORY_DESCRIPTOR_VERSION) || (DescriptorSize < sizeof (EFI_MEMORY_DESCRIPTOR))) {
+    DEBUG ((DEBUG_ERROR, "SetVirtualAddressMap <- (%r)\n", EFI_INVALID_PARAMETER));
     return EFI_INVALID_PARAMETER;
   }
 
@@ -368,6 +372,8 @@ RuntimeDriverSetVirtualAddressMap (
   mVirtualMap         = NULL;
   mVirtualMapMaxIndex = 0;
 
+  DEBUG ((DEBUG_ERROR, "SetVirtualAddressMap <- (%r)\n", EFI_SUCCESS));
+
   return EFI_SUCCESS;
 }
 
diff --git a/MdeModulePkg/Library/UefiBootManagerLib/BmBoot.c b/MdeModulePkg/Library/UefiBootManagerLib/BmBoot.c
index 962892d38f14..de9a0b4f483f 100644
--- a/MdeModulePkg/Library/UefiBootManagerLib/BmBoot.c
+++ b/MdeModulePkg/Library/UefiBootManagerLib/BmBoot.c
@@ -2036,8 +2036,9 @@ EfiBootManagerBoot (
 
   REPORT_STATUS_CODE (EFI_PROGRESS_CODE, PcdGet32 (PcdProgressCodeOsLoaderStart));
 
+  DEBUG ((DEBUG_ERROR, "About to call StartImage (0x%p)\n", ImageHandle));
   Status = gBS->StartImage (ImageHandle, &BootOption->ExitDataSize, &BootOption->ExitData);
-  DEBUG ((DEBUG_INFO | DEBUG_LOAD, "Image Return Status = %r\n", Status));
+  DEBUG ((DEBUG_ERROR | DEBUG_LOAD, "Image Return Status = %r\n", Status));
   BootOption->Status = Status;
 
   //
diff --git a/OvmfPkg/XenPvBlkDxe/BlockFront.c b/OvmfPkg/XenPvBlkDxe/BlockFront.c
index 7aa5ef044be0..50923ba4c138 100644
--- a/OvmfPkg/XenPvBlkDxe/BlockFront.c
+++ b/OvmfPkg/XenPvBlkDxe/BlockFront.c
@@ -355,7 +355,7 @@ Again:
   }
 
   DEBUG ((
-    DEBUG_INFO,
+    DEBUG_ERROR,
     "XenPvBlk: New disk with %ld sectors of %d bytes\n",
     Dev->MediaInfo.Sectors,
     Dev->MediaInfo.SectorSize
