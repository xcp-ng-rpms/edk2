From: Anthony PERARD <anthony.perard@citrix.com>
Subject: MdePkg/SecPeiDxeTimerLibCpu: Support for dynamic PcdFSBClock

The PcdFSBClock can be a dynamic PCD. This can be an issue when
InternalX86GetTimerFrequency() tries to get the value while been
called with TPL been set to TPL_HIGH_LEVEL.

When the PCD is dynamic, PcdGet*() calls a function that try to grab a
lock which set TPL to TPL_NOTIFY. If TPL is already at TPL_HIGH_LEVEL,
then an assert() in RaiseTPL() fails (in debug build).

This patch introduces a constructor via a new instance RuntimeTimerLibCpu which
can be used when PcdLib is ready whe the library constructor is runned. This
allow to cache the value of PcdFSBClock early enough and TPL isn't to high.
When the constructor isn't called, that is when using the SecPeiDxeTimerLibCpu
instance, the value of PcdFSBClock will be cached the first time it is used.

The issue was discovered while attempting to boot a Windows guest with
OvmfXen platform. The issue appear while executing the Windows's boot
loader EFI application.

The down side of this change is that when the PCD is FixedAtBuild, the
value is loaded from a variable rather than been a constant.

Signed-off-by: Anthony PERARD <anthony.perard@citrix.com>
diff --git a/MdePkg/Library/SecPeiDxeTimerLibCpu/RuntimeTimerLibConstructor.c b/MdePkg/Library/SecPeiDxeTimerLibCpu/RuntimeTimerLibConstructor.c
new file mode 100644
index 0000000000..2fa918ff9e
--- /dev/null
+++ b/MdePkg/Library/SecPeiDxeTimerLibCpu/RuntimeTimerLibConstructor.c
@@ -0,0 +1,22 @@
+/** @file
+  Contructor for Timer Library functions
+
+  Copyright (c) 2022, Citrix Systems, Inc.
+  SPDX-License-Identifier: BSD-2-Clause-Patent
+
+**/
+
+extern UINT32 mFSBClock;
+
+RETURN_STATUS
+EFIAPI
+TimerLibConstruct (
+  VOID
+  )
+{
+  //
+  // Cache current value of PcdFSBClock when it's a dynamic PCD.
+  //
+  mFSBClock = PcdGet32 (PcdFSBClock);
+  return RETURN_SUCCESS;
+}
diff --git a/MdePkg/Library/SecPeiDxeTimerLibCpu/RuntimeTimerLibCpu.inf b/MdePkg/Library/SecPeiDxeTimerLibCpu/RuntimeTimerLibCpu.inf
new file mode 100644
index 0000000000..5b1b7339eb
--- /dev/null
+++ b/MdePkg/Library/SecPeiDxeTimerLibCpu/RuntimeTimerLibCpu.inf
@@ -0,0 +1,56 @@
+## @file
+# Instance of Timer Library only using CPU resources.
+#
+# Timer Library that only uses CPU resources to provide calibrated delays
+#  on IA-32, x64, and IPF.
+# Note: A driver of type DXE_RUNTIME_DRIVER and DXE_SMM_DRIVER can use this TimerLib
+#  in their initialization without any issues. They only have to be careful in
+#  the implementation of runtime services and SMI handlers.
+#  Because CPU Local APIC and ITC could be programmed by OS, it cannot be
+#  used by SMM drivers and runtime drivers, ACPI timer is recommended for SMM
+#  drivers and runtime drivers.
+#
+# Note that for IA-32 and x64, this library only supports xAPIC mode. If x2APIC
+# support is desired, the SecPeiDxeTimerLibUefiCpu library can be used.
+#
+# Copyright (c) 2007 - 2018, Intel Corporation. All rights reserved.<BR>
+#
+#  SPDX-License-Identifier: BSD-2-Clause-Patent
+#
+#
+##
+
+[Defines]
+  INF_VERSION                    = 0x00010005
+  BASE_NAME                      = RuntimeTimerLibCpu
+  MODULE_UNI_FILE                = RuntimeTimerLibCpu.uni
+  FILE_GUID                      = 09e6f0da-ad1c-499e-928d-8310a23d1168
+  MODULE_TYPE                    = BASE
+  VERSION_STRING                 = 1.0
+  LIBRARY_CLASS                  = TimerLib
+  CONSTRUCTOR                    = TimerLibConstruct
+
+
+#
+#  VALID_ARCHITECTURES           = IA32 X64
+#
+
+[Sources.Ia32, Sources.X64]
+  X86TimerLib.c
+  RuntimeTimerLibConstructor.c
+
+[Packages]
+  MdePkg/MdePkg.dec
+
+
+[LibraryClasses]
+  BaseLib
+
+[LibraryClasses.IA32, LibraryClasses.X64]
+  PcdLib
+  IoLib
+  DebugLib
+
+[Pcd.IA32, Pcd.X64]
+  gEfiMdePkgTokenSpaceGuid.PcdFSBClock  ## CONSUMES
+
diff --git a/MdePkg/Library/SecPeiDxeTimerLibCpu/X86TimerLib.c b/MdePkg/Library/SecPeiDxeTimerLibCpu/X86TimerLib.c
index c60589607f..852e3bb620 100644
--- a/MdePkg/Library/SecPeiDxeTimerLibCpu/X86TimerLib.c
+++ b/MdePkg/Library/SecPeiDxeTimerLibCpu/X86TimerLib.c
@@ -31,6 +31,8 @@ CONST UINT8  mTimerLibLocalApicDivisor[] = {
   0x20, 0x40, 0x80, 0x01
 };
 
+UINT32 mFSBClock;
+
 /**
   Internal function to retrieve the base address of local APIC.
 
@@ -90,8 +92,14 @@ InternalX86GetTimerFrequency (
   IN      UINTN  ApicBase
   )
 {
+  if (mFSBClock == 0) {
+      //
+      // Cache current value of PcdFSBClock in case it's a dynamic PCD.
+      //
+      mFSBClock = PcdGet32 (PcdFSBClock);
+  }
   return
-    PcdGet32 (PcdFSBClock) /
+    mFSBClock /
     mTimerLibLocalApicDivisor[MmioBitFieldRead32 (ApicBase + APIC_TDCR, 0, 3)];
 }
 
